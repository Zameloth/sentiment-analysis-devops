trigger:
  - main

variables:
  # Variables pour Azure
  azureSubscription: 'myserviceconnection'
  resourceGroupName: 'sentimentApi'
  location: 'westeurope'

  # Variables pour le registre de conteneurs
  acrName: '4iabdSentimentACR754'
  containerRegistry: '$4iabdsentimentacr754.azurecr.io'

  # Variables pour les images Docker
  apiImageName: 'sentiment-api'
  modelImageName: 'sentiment-model'
  tag: '$(Build.BuildId)'

  resource_group_name: 'sentimentApi'  # Correspond à votre variable Terraform
  storage_account_name: 'sentimentapistate'


stages:
  - stage: Deploy
    jobs:
      - job: DeployInfrastructure
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Téléchargement des artefacts de build si nécessaire
          - download: current
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: '1.7.2'

          - task: AzureCLI@2
            displayName: 'Create Azure Storage for Terraform State'
            inputs:
              azureSubscription: '$(azureSubscription)'  # Remplacez par votre nom de connexion de service
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Créer le groupe de ressources
                az group create --name $(resource_group_name) --location $(location)

                # Créer le compte de stockage
                az storage account create \
                  --name $(storage_account_name) \
                  --resource-group $(resource_group_name) \
                  --location $(location) \
                  --sku Standard_LRS

                # Créer le conteneur
                az storage container create \
                  --name tfstate \
                  --account-name $(storage_account_name)


              # Initialisation de Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              backendServiceArm: '$(azureSubscription)'
              backendAzureRmResourceGroupName: '$(resourceGroupName)'
              backendAzureRmStorageAccountName: 'sentimentapistate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'sentimentapi/terraform.tfstate'

          # Télécharger l'état Terraform existant
          - task: AzureCLI@2
            displayName: 'Download Terraform State'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              inlineScript: |
                # Vérifier si le blob existe avant de le télécharger
                if az storage blob exists \
                  --account-name $(storage_account_name) \
                  --container-name tfstate \
                  --name sentimentapi/terraform.tfstate \
                  --query exists \
                  --output tsv | grep -q "true"; then
                
                  # Télécharger le tfstate existant
                  az storage blob download \
                    --account-name $(storage_account_name) \
                    --container-name tfstate \
                    --name sentimentapi/terraform.tfstate \
                    --file terraform.tfstate
                else
                  echo "No existing state file found. Starting fresh."
                fi
                
                
                # Supprimer la ressource de l'état
          - task: AzureCLI@2
            displayName: 'Remove Resource from State'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              inlineScript: |
                terraform state rm azurerm_resource_group.rg || true

          # Importer les ressources existantes
          - task: AzureCLI@2
            displayName: 'Import Existing Resources'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              inlineScript: |
                # Récupérer l'ID de souscription
                SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                
                # Importer le groupe de ressources
                terraform import \
                  azurerm_resource_group.rg \
                  "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$(resourceGroupName)"


          # Plan Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              environmentServiceNameAzureRM: '$(azureSubscription)'
              commandOptions: '-var="image_tag=$(tag)"'

          # Application Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              environmentServiceNameAzureRM: '$(azureSubscription)'
              commandOptions: '-auto-approve -var="image_tag=$(tag)"'

          # Push du nouveau tfstate si succès
          - task: AzureCLI@2
            displayName: 'Push Updated Terraform State'
            condition: succeeded()
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
              inlineScript: |
                az storage blob upload \
                  --account-name $(storage_account_name) \
                  --container-name tfstate \
                  --name sentimentapi/terraform.tfstate \
                  --file terraform.tfstate \
                  --overwrite

  - stage: Build
    dependsOn: Deploy
    jobs:
      - job: BuildAndPublish
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Connexion à ACR
          - task: AzureCLI@2
            displayName: 'ACR Login'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acrName)

          # Construction et push de l'image API
          - task: Docker@2
            displayName: 'Build and Push API Image'
            inputs:
              command: 'buildAndPush'
              repository: '$(apiImageName)'
              containerRegistry: '$(containerRegistry)'
              Dockerfile: 'api/Dockerfile'
              tags: |
                $(tag)
                latest

          # Construction et push de l'image Model
          - task: Docker@2
            displayName: 'Build and Push Model Image'
            inputs:
              command: 'buildAndPush'
              repository: '$(modelImageName)'
              containerRegistry: '$(containerRegistry)'
              Dockerfile: 'model/Dockerfile'
              tags: |
                $(tag)
                latest


  - stage: HealthCheck
    dependsOn: Build
    jobs:
      - job: TestEndpoints
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Test API Health
                $apiHealth = Invoke-RestMethod -Uri "https://$(apiWebAppName).azurewebsites.net/health"
                if ($apiHealth.status -ne "ok") { throw "API health check failed" }
                
                # Test Model Service Health
                $modelHealth = Invoke-RestMethod -Uri "https://$(modelWebAppName).azurewebsites.net/health"
                if ($modelHealth.status -ne "ok") { throw "Model service health check failed" }
