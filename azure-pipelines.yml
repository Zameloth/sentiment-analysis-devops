trigger:
  branches:
    include:
      - main

variables:
  # Service Connection ARM
  azureSubscription: 'myserviceconnection'

  # Backend Azure Storage (doit exister ou être créé en amont)
  storage_account_name: 'sentimentapistate'
  container_name: 'tfstate'
  backend_key: 'sentimentapi/terraform.tfstate'

  # Variables Terraform
  resource_group_name: 'sentimentAnalysis'
  location: 'West Europe'
  acr_name: '4iabdSentimentACR'
  app_service_plan_name: 'myAppPlan'
  webapp_name: '4iabdSentimentAPIWebApp'
  image_name: '4iabdSentimentAPI'
  image_tag: '$(Build.BuildId)'
  terraformDir: '.'  # Dossier racine des .tf

stages:

  - stage: Terraform
    displayName: 'Terraform Init → Import → Plan → Apply'
    jobs:
      - job: TF
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                # Télécharger et installer Terraform
                TERRAFORM_VERSION="1.9.8"
                wget -O terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                unzip terraform.zip
                sudo mv terraform /usr/local/bin/
                terraform --version

          - task: AzureCLI@2
            displayName: 'Test Connection'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Testing Azure connection..."
                az account show
                echo "Connection successful!"

      # 3) Terraform Init avec backend Azure
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                cd $(terraformDir)
                terraform init \
                  -backend-config="resource_group_name=$(resource_group_name)" \
                  -backend-config="storage_account_name=$(storage_account_name)" \
                  -backend-config="container_name=$(container_name)" \
                  -backend-config="key=$(backend_key)" \
                  -migrate-state


          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform plan \
                  -var="resource_group_name=$(resource_group_name)" \
                  -var="location=$(location)" \
                  -var="acr_name=$(acr_name)" \
                  -var="app_service_plan_name=$(app_service_plan_name)" \
                  -var="webapp_name=$(webapp_name)" \
                  -var="image_name=$(image_name)" \
                  -var="image_tag=$(image_tag)" \
                  -out=tfplan

          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform apply -auto-approve tfplan

  - stage: Build_and_Push
    displayName: 'Build Docker & Push to ACR'
    dependsOn: Terraform
    jobs:
      - job: Docker
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Login to ACR'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(acr_name)

          - task: Docker@2
            displayName: 'Build & Push image'
            inputs:
              command: buildAndPush
              repository: $(acr_name).azurecr.io/$(image_name)
              Dockerfile: '**/Dockerfile'
              tags: |
                $(image_tag)

  - stage: Deploy_App
    displayName: 'Deploy to App Service'
    dependsOn: Build_and_Push
    jobs:
      - job: Deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Update App Service with new image'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config container set \
                  --resource-group $(resource_group_name) \
                  --name $(webapp_name) \
                  --docker-custom-image-name $(acr_name).azurecr.io/$(image_name):$(image_tag)
                az webapp restart \
                  --resource-group $(resource_group_name) \
                  --name $(webapp_name)

  - stage: Smoke_Test
    displayName: 'Smoke Tests'
    dependsOn: Deploy_App
    jobs:
      - job: Test
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Healthcheck & Predict'
            inputs:
              connectedServiceNameARM: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                URL=$(az webapp show \
                  --resource-group $(resource_group_name) \
                  --name $(webapp_name) \
                  --query defaultHostName -o tsv)
                echo "Health:" && curl -fsS https://$URL/health
                echo "Predict:" && curl -fsS -X POST https://$URL/predict \
                  -H "Content-Type: application/json" \
                  -d '{"text":"Test de déploiement"}'
