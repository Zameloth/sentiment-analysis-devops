trigger:
  - main

variables:
  # Variables pour Azure
  azureSubscription: 'myserviceconnection'
  resourceGroupName: 'sentimentApi'
  location: 'West Europe'

  # Variables pour le registre de conteneurs
  containerRegistry: '4iabdSentimentACR.azurecr.io'

  # Variables pour les images Docker
  apiImageName: 'sentiment-api'
  modelImageName: 'sentiment-model'
  tag: '$(Build.BuildId)'

stages:
  - stage: Deploy
    jobs:
      - job: DeployInfrastructure
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Téléchargement des artefacts de build si nécessaire
          - download: current

          # Initialisation de Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
              backendServiceArm: '$(azureSubscription)'
              backendAzureRmResourceGroupName: '$(resourceGroupName)'
              backendAzureRmStorageAccountName: 'sentimentapistate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'sentimentapi/terraform.tfstate'

          # Plan Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
              environmentServiceNameAzureRM: '$(azureSubscription)'
              commandOptions: '-var="image_tag=$(tag)"'

          # Application Terraform
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'
              environmentServiceNameAzureRM: '$(azureSubscription)'
              commandOptions: '-auto-approve -var="image_tag=$(tag)"'
  - stage: Build
    dependsOn: Deploy
    jobs:
      - job: BuildAndPublish
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Installation des dépendances Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'

          # Construction et push de l'image API
          - task: Docker@2
            displayName: 'Build and Push API Image'
            inputs:
              containerRegistry: '$(containerRegistry)'
              repository: '$(apiImageName)'
              command: 'buildAndPush'
              Dockerfile: 'api/Dockerfile'
              tags: |
                $(tag)
                latest

          # Construction et push de l'image Model
          - task: Docker@2
            displayName: 'Build and Push Model Image'
            inputs:
              containerRegistry: '$(containerRegistry)'
              repository: '$(modelImageName)'
              command: 'buildAndPush'
              Dockerfile: 'model/Dockerfile'
              tags: |
                $(tag)
                latest


  - stage: HealthCheck
    dependsOn: Deploy
    jobs:
      - job: TestEndpoints
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Test API Health
                $apiHealth = Invoke-RestMethod -Uri "https://$(apiWebAppName).azurewebsites.net/health"
                if ($apiHealth.status -ne "ok") { throw "API health check failed" }
                
                # Test Model Service Health
                $modelHealth = Invoke-RestMethod -Uri "https://$(modelWebAppName).azurewebsites.net/health"
                if ($modelHealth.status -ne "ok") { throw "Model service health check failed" }
